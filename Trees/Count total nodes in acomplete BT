//TC - O((logN)^2)  SC - O(N)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) return 0;
        
        //if the root is not null -> find the left and right height
        int leftH = findLeftH(root);
        int rightH = findRightH(root);
        
        //if left and right height is equal that means I can simply use formulae 2*h-1
        if(leftH == rightH) return ((2<<(leftH)) - 1);
        
        //else recursively calculate the number of nodes in left and right and add 1 for the root
        else return countNodes(root.left) + countNodes(root.right) + 1;
    }
        public int findLeftH(TreeNode root)
        {
             int count = 0;
            while(root.left != null)
            {
                count++;
                root = root.left;
            }
            return count;
        }
        public int findRightH(TreeNode root)
        {
            int count = 0;
            while(root.right != null)
            {
                count++;
                root = root.right;
            }
            return count;
        }
    
}
