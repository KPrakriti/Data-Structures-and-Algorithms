/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 //Time Complexity: O(N*logN*logN*logN)
//Space Complexity: O(N)

class Tuple {
    TreeNode node; 
    int row;
    int col; 
    public Tuple(TreeNode _node, int _row, int _col) {
        node = _node; 
        row = _row; 
        col = _col; 
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        Queue<Tuple> q = new LinkedList<Tuple>();
        q.offer(new Tuple(root,0,0));
        
        while(!q.isEmpty())
        {
            Tuple tuple = q.poll();
            TreeNode node = tuple.node;
            int x = tuple.row; //vertical
            int y = tuple.col; //level
            
            if(!map.containsKey(x)) //if for a vertical a treemap doesn't exists we create a treemap
            {
                map.put(x, new TreeMap<>());
            }
            if(!map.get(x).containsKey(y)) //if for a level a priorityQueue doesn't exists we create a priorityQueue
            {
                map.get(x).put(y, new PriorityQueue<>());
            }
            map.get(x).get(y).offer(node.val); //get the vertical, get the TreeMap of level and insert the node.val in priorityQ
            
            if(node.left != null)
            {
                q.offer(new Tuple(node.left,x-1, y+1)); //if node's left exists go left -> vertical-1 and level+1
            }
            if(node.right != null)
            {
                q.offer(new Tuple(node.right,x+1, y+1)); //if node's right exists go right -> vertical+1 and level+1
            }
        }
        List<List<Integer>> list = new ArrayList<>();
        //iterate for every vertical -> -2, -1, 0, 1, 2
        for (TreeMap<Integer, PriorityQueue<Integer>> ys : map.values()) {
            //adding empty list for every vertical
            list.add(new ArrayList<>());
            //iterate in PriorityQ and add the values at the end of the list
            for (PriorityQueue<Integer> nodes : ys.values()) {
                while (!nodes.isEmpty()) {
                    list.get(list.size() - 1).add(nodes.poll());
                }
            }
        }
        return list;
    }
}
