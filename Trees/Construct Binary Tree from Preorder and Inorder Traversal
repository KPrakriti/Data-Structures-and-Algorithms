/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//TC - O(N) SC - O(N)
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        //1.put inorder into HM
        Map<Integer,Integer> inMap = new HashMap<>();
        for(int i = 0; i<inorder.length; i++)
        {
            inMap.put(inorder[i],i);
        }
        //2.create a recursive function that create noes for preorder and inorder
        TreeNode root = buildTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,inMap);
        
        return root;
    }
    private TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer,Integer> inMap)
    {
        //return null if start val > end val
        if(preStart>preEnd || inStart>inEnd) return null;
        
        //else create a new node
        TreeNode root = new TreeNode(preorder[preStart]); //bcz we know that in Preorder the 1st value has to be the root
        
        //now lets figure out where does this root.val lies in the Inorder 
        //then we can simply find its left and right 
        int inRoot = inMap.get(root.val);
        int numsLeft = inRoot - inStart; //we figured out that how many left elements are there 
        
        //we have the root so lets call the buildtree function for root.left and root.right
        root.left = buildTree(preorder,preStart+1,preStart+numsLeft, inorder,inStart,inRoot-1,inMap);
        
        root.right = buildTree(preorder,preStart+numsLeft+1,preEnd, inorder,inRoot+1,inEnd,inMap);
        
        return root;
    }
}
