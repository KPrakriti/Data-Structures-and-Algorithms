//TC - O(N) SC- O(H)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//craete a new class for BSTiterator
public class BSTiterator{
    //create a stack
    private Stack<TreeNode> st = new Stack<>();
    boolean reverse = true; //reverse -> true = before & reverse -> false = next
    
    public BSTiterator(TreeNode root, boolean isReverse)
    {
        reverse = isReverse;
        pushAll(root);
    }
    public boolean hasNext()
    {
        return !st.isEmpty();
    }
    
    public int next()
    {
        TreeNode temp = st.pop();
        if(reverse == false) pushAll(temp.right);
        else pushAll(temp.left);
        return temp.val;
    }
    
    public void pushAll(TreeNode node)
    {
        while(node != null)
        {
            st.push(node);
            if(reverse == true) node = node.right;
            else node = node.left;
        }
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root == null) return false;
        
        BSTiterator l = new BSTiterator(root, false); //reverse -> false = next
        BSTiterator r = new BSTiterator(root, true);  //reverse -> true = before
        
        int i = l.next(); //gives the next as per ascending inorder traversal
        int j = r.next(); //gives the next as per descending inorder traversal
        
        while(i<j)
        {
            if(i+j == k) return true;
            else if(i+j > k) j = r.next();
            else i = l.next();
        }
        return false;
    }
}
