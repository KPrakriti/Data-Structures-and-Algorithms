TC - O(4^m*n) -> bcz fow every cell. I am trying 4 directions.
SC - O(m*n) -> Depth of the recursion tree. In worst case all the cells could have contain 1 (a valid path) 

class Solution {
    private static void solve(int i, int j, int a[][], int n, ArrayList < String > ans, String move,
    int vis[][])
    {
        //I know base case is when I reach my destination. 
        //I clearly know my destination is at  (N - 1, N - 1)
         if (i == n - 1 && j == n - 1) 
         {
         ans.add(move);
         return;
         }
         
         // downward
    if (i + 1 < n && vis[i + 1][j] == 0 && a[i + 1][j] == 1) {
      vis[i][j] = 1;
      solve(i + 1, j, a, n, ans, move + 'D', vis);
      vis[i][j] = 0;
    }
    
    // left
    if (j - 1 >= 0 && vis[i][j - 1] == 0 && a[i][j - 1] == 1) {
      vis[i][j] = 1;
      solve(i, j - 1, a, n, ans, move + 'L', vis);
      vis[i][j] = 0;
    }

    // right 
    if (j + 1 < n && vis[i][j + 1] == 0 && a[i][j + 1] == 1) {
      vis[i][j] = 1;
      solve(i, j + 1, a, n, ans, move + 'R', vis);
      vis[i][j] = 0;
    }
    
    // upward
    if (i - 1 >= 0 && vis[i - 1][j] == 0 && a[i - 1][j] == 1) {
      vis[i][j] = 1;
      solve(i - 1, j, a, n, ans, move + 'U', vis);
      vis[i][j] = 0;
    }

         
    }
    
    public static ArrayList<String> findPath(int[][] m, int n) {
    int vis[][] = new int[n][n]; //matrix to keep chk of the visited cells. As revisitiong a cell is not allowed
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        vis[i][j] = 0;
      }
    }

    ArrayList<String> ans = new ArrayList <>(); //declare an arraylist to store the ans
    
    //we know we can only mode at cells having value 1 
    //so we define a function solve for those cells only
    //0,0 -> row-col value
    //m is given matrix 
    //n is matrix len
    //ans is my arraylist to store output
    //" " - empty string
    //vis-> new matrix to keep track of visited cells.
    if (m[0][0] == 1) solve(0, 0, m, n, ans, "", vis);
    return ans;
  
    }
}
