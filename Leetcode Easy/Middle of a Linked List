1. Naive Approach 

all we need to do is to traverse the given link list and find the total number of nodes
again traverse the linked list but for n/2 times only because that will be the middle element

TC - O(N) + O(N/2)
SC - O(1)

Code - 

class Solution {
    public ListNode middleNode(ListNode head) {
        
        int n = 0;
        ListNode temp = head;
        
        while(temp != null)
        {
            n++;
            temp = temp.next;
        }
        
        temp = head;
        
        for(int i = 0; i<n/2;i++)
        {
            temp = temp.next;
        }
        return temp;
    }
}

2. Efficicient Approach - Tortoise Hare Approach 
TC - O(N) SC - O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
        //we will use Tortoise methos where we have two pointers 
        //slow and fast 
        //slow moves 1 step and fast moves 2 steps at a time 
        //so we can say that at the time when the fast ptr will reach the end of the linked list
        //the slow pointer would be at the middle
        //ans we can simply return that! 
        
        //lets create 2 pointers slow and fast and initialize both to head
        ListNode slow = head, fast = head;
        
        //we need to traverse the linked list until the fast reaches the end i.e, the fast becomes null 
        //or the next of fast becomes null
        while(fast != null && fast.next != null)
        {
            slow = slow.next; //moving 1 step
            fast = fast.next.next; //moving 2 steps
                
        }
        return slow;
    }
}
