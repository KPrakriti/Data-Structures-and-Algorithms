class Solution{
    
    static void func(int ind, int sum, ArrayList < Integer > arr, int N, ArrayList < Integer > sumSubset) {
        //Base case reaches when we come at the end of the array
        if (ind == N) {
            sumSubset.add(sum);
            return;
        }

        // pick the element 
        func(ind + 1, sum + arr.get(ind), arr, N, sumSubset);

        // Do-not pick the element
        func(ind + 1, sum, arr, N, sumSubset);
    }
    
    static ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        //craete an arrayList to return
        ArrayList < Integer > sumSubset = new ArrayList < > ();
        //created a function that will give me the subset sum
        func(0, 0, arr, N, sumSubset);
        //after we get the subset sum we sort the array list
        Collections.sort(sumSubset);
        return sumSubset;
    }
}

TC - O(2^n)+O(2^n log(2^n)). Each index has two ways. 
     You can either pick it up or not pick it. So for n index time complexity for O(2^n) and for sorting it will take (2^n log(2^n)).
SC - O(2^N) where N is the size of input array 
