//TC - O(1)

class LFUCache {

    int curSize;       //the current size of the cache
    int minFrequency;  //the minimum freq that is present
    int capacity;      //the total capacity of the cache
    
    Map<Integer, DLLNode> cache;  //this is basically saying the key is presnt at this node
    Map<Integer, DoubleLinkedList> freqMap; //this is basically saying this freq is having this linkedList
    
    //constructor
    public LFUCache(int capacity) {
        this.curSize = 0;
        this.minFrequency = 0;
        this.capacity = capacity;
        this.cache = new HashMap<>();
        this.freqMap = new HashMap<>();
    }
    
    /*get - 1.check if this key exists and get the value associated with it 
            2.if we got the value, that means we have accessed it and thus we must increment its frequency
            3.if we have accessed it means its position must be updated
              and now it must appear right after the head*/
    public int get(int key) 
    {
        DLLNode curNode = cache.get(key);
        //if it doesnot exist this is how I check 
        if(curNode == null) 
        {
            return -1;
        }
        //update:freq will increase bcz we accessed it + the position of this node will change too.
        updateNode(curNode); 
        return curNode.val;
        
    }
    
    public void put(int key, int value) 
    {
        if(capacity == 0) 
        {
            return;
        }
        
        //check if the cacahe contains this key
        if(cache.containsKey(key))
        {
            DLLNode curNode = cache.get(key); //if exists we take the key and..
            curNode.val = value; //..initialize the new value and...
            updateNode(curNode); //..and since we've accessed it we have to upate its freq 
        }
        else
        {
        //if it doesnot exists previously, we know the current Cache size will increase
        curSize++;
        if(curSize > capacity) //if its full we know we've to remove someone
        {
            //remove LFU - get the minimum freq List
            DoubleLinkedList minFreqList = freqMap.get(minFrequency);
            
            //remove from cache - the LRU from the minimum freq list
            cache.remove(minFreqList.tail.prev.key);
            
            //remove from the list as well
            minFreqList.removeNode(minFreqList.tail.prev);
            
            curSize--;
        }
         //reset the minFrequency to 1 - because we added a new elemnt so it is obvious that minFreq will be = 1
            minFrequency = 1;
            
            //keep the key and value into a DLL node
            DLLNode newNode = new DLLNode(key,value);
            
            //get the list with freq 1 if there exists and add this node to it, and if not then create a new list and add
            DoubleLinkedList curList = freqMap.getOrDefault(1, new DoubleLinkedList());
            curList.addNode(newNode);
            freqMap.put(1,curList);
            cache.put(key,newNode);
            
        }  
    }
    
    public void updateNode(DLLNode curNode)
    {
        //take the frquency of this node
        int curFreq = curNode.frequency;
        
        //take the list that belongs to this frequency
        DoubleLinkedList curList = freqMap.get(curFreq);
        
        //remove the node from its current frquency list as it will have a freq increment 
        curList.removeNode(curNode);
        
        /*if current freq is the minimum freq and the freq list is only having this value which is now removed the
          that means the list with minimum freq got empty and thus the minFrequency now will be the next guy i.e,
          minFrequency++*/
        if(curFreq == minFrequency && curList.listSize == 0)
        {
            minFrequency++;
        }
        
        //right after this the curNode frequency will increase because it has been accessed
        curNode.frequency++;
        
        //now as the frequency has increase therefore this node will go to increased frequencyList
        //therefore we get the linked list
        //if we dont have the list, initialize it
        DoubleLinkedList newList = freqMap.getOrDefault(curNode.frequency, new DoubleLinkedList());
        newList.addNode(curNode); //add this node to the list
        freqMap.put(curNode.frequency, newList); //put it in the freqMap saying that this freq has a new list 
    }
    
    class DLLNode 
    {
        int key;
        int val;
        int frequency;
        DLLNode prev;
        DLLNode next;

        public DLLNode(int key, int val) 
        {
            this.key = key;
            this.val = val;
            this.frequency = 1;
        }
    }
    
    class DoubleLinkedList {
        int listSize;
        DLLNode head;
        DLLNode tail;
        public DoubleLinkedList() {
            this.listSize = 0;
            this.head = new DLLNode(0, 0);
            this.tail = new DLLNode(0, 0);
            head.next = tail;
            tail.prev = head;
        }

        /** add new node into head of list and increase list size by 1 **/
        public void addNode(DLLNode curNode) {
            DLLNode nextNode = head.next;
            curNode.next = nextNode;
            curNode.prev = head;
            head.next = curNode;
            nextNode.prev = curNode;
            listSize++;
        }

        /** remove input node and decrease list size by 1**/
        public void removeNode(DLLNode curNode) {
            DLLNode prevNode = curNode.prev;
            DLLNode nextNode = curNode.next;
            prevNode.next = nextNode;
            nextNode.prev = prevNode;
            listSize--;
        }

    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
