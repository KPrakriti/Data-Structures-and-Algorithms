class pair{
    int x,y;
    pair(int x, int y){
        //x -> value & y -> minimum
        this.x = x;
        this.y = y;
    }
}
class MinStack {
    Stack<pair> st;
    public MinStack() {
        st = new Stack<>();
    }
    
    public void push(int x) {
        int min;
        if(st.isEmpty())
        {
            min = x;
        }
        else
        {
            min = Math.min(st.peek().y,x);
        }
        st.push(new pair(x,min));
    }
    
    public void pop() {
        st.pop();
    }
    
    public int top() {
        return st.peek().x;
    }
    
    public int getMin() {
        return st.peek().y;
    }
}
//TC - O(1) - for all operations && SC - O(2N) - because we're storing pairs

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
