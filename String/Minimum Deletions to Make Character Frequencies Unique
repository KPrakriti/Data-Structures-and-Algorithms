TC - O(L) - where L is string length + O(K) - where k is the length of the freq array

A string s is called good if there are no two different characters in s that have the same frequency.

Given a string s, return the minimum number of characters you need to delete to make s good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1.

Example 1:

Input: s = "aab"
Output: 0
Explanation: s is already good.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int minDeletions(String s) {
        
        //create a freq_arr of size 26
        int[] freq = new int[26];
        
        for(int i = 0; i<s.length(); i++)
        {
            freq[s.charAt(i) - 'a']++; //we are increasing the occurence in the freq_arr as per their frequency in input
        }
        
        //start adding these frequencies into a set DS
        int deletions = 0;
        Set<Integer> seenFreq = new HashSet<>();
        
        for(int i = 0; i<freq.length; i++)
        {
            while(freq[i] > 0 && seenFreq.contains(freq[i]))
            {
                freq[i]--;
                deletions++;
            }
            seenFreq.add(freq[i]);
        }
        return deletions;
    }
}
