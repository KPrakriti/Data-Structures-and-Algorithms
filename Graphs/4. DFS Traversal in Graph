class Solution {
   // Function to return a list containing the DFS traversal of the graph.
   public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
     
     boolean visited[] = new boolean[V];
     ArrayList<Integer> ans = new ArrayList<>(V);
     for(int i = 0 ; i < V ; i++)
     {
         if(visited[i] == false)
         {
             doDfs(adj, visited, ans, i);
         }
     }
       return ans;
   }
   
   public static void doDfs(ArrayList<ArrayList<Integer>> graph, boolean visited[], ArrayList<Integer> ans, int source)
   {
       visited[source] = true;
        ans.add(source);
        
       for(int x : graph.get(source))
       {
           if(!visited[x])
           {
              
               doDfs(graph, visited, ans, x);
           }
       }
   }
   
}
