/*
There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.
*/

//if the parent of both source and destination is same then there is a path
//TC - O(N+E) SC - O(N)
class Solution {
    int[]par;
    private int findPar(int u)
    {
       return par[u] == u ? u : (par[u] = findPar(par[u]));
    }
    public boolean validPath(int n, int[][] edges, int start, int end) {
        par = new int[n];
        for(int i = 0;i<n;i++)
        {
            par[i] = i;
        }
        for(int[]e:edges)
        {
            int p1 = findPar(e[0]);
            int p2 = findPar(e[1]);
            if(p1 != p2)
            {
                par[p1] = p2;
            }
        }
        // if global parent of start vertex and end vertex is same then there exists a path
        return findPar(start) == findPar(end);
    }
}


------------------------------------------------------------------------------------------------------------------

class Solution 
{
    public boolean validPath(int n, int[][] edges, int start, int end) 
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<edges.length;i++)
        {
            adj.get(edges[i][0]).add(edges[i][1]);
            adj.get(edges[i][1]).add(edges[i][0]);
        }
        boolean vis[] = new boolean[n];
        return dfs(adj,start,end,vis);
    }
    public boolean dfs(ArrayList<ArrayList<Integer>> adj,int start,int end,boolean vis[])
    {
        if(start==end)
            return true;
        
        vis[start]=true;
        for(int e: adj.get(start))
        {
            if(!vis[e])
            {
                if(dfs(adj,e,end,vis))
                    return true;
            }
        }
        return false;
    }
}

