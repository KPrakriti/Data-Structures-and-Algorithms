class Solution {
    
    static boolean cycleDFS(int s, int parent, boolean[] vis, ArrayList<ArrayList<Integer>> adj)
    {
        vis[s] = true;
        for(Integer it: adj.get(s))
        {
            if(vis[it] == false)
            {
                if(cycleDFS(it, s, vis, adj) == true) return true;
            }
            else if(it != parent)//meaning this node has been visited but not a prev node
            {
                return true;
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        
        //create boolean vis array
        boolean[] vis = new boolean[V];
        Arrays.fill(vis,false);
        
        for(int i = 0; i<V; i++)
        {
          if(vis[i] == false)
          {
              if(cycleDFS(i, -1, vis, adj))
              {
                  return true;
              }
          }
        }
        return false;
    }
}
