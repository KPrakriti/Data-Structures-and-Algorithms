class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        //create an array topo to return
        int[] topo = new int[V];
        
        //we need an array that stores indegree of the nodes
        int[] indegree = new int[V];
        
        for(int i = 0; i<V; i++)
        {
            for(Integer it: adj.get(i))
            {
                indegree[it]++; //this is how we store the indegree
            }
        }
        //take a Queue and add all the 0 indegree nodes in the queue
        Queue<Integer> q = new LinkedList<>();
        for(int i =0; i<V; i++)
        {
            if(indegree[i] == 0)
            {
                q.add(i);
            }
        }
        //run the BFS algo
        int ind = 0;
        while(!q.isEmpty())
        {
            Integer node = q.poll();
            topo[ind++] = node;
            
            //check for adj nodes
            for(Integer it: adj.get(node))
            {
                //reduce the indegree by 1
                indegree[it]--;
                if(indegree[it] == 0) q.add(it);
            }
        }
        return topo;
    }
}
