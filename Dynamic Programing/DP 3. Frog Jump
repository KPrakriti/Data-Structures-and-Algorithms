//1. Recursion
/*
    Time Complexity: O(2^N)
    Space Complexity: O(2^N)

    where 'N' is the number of staris in the staircase.
*/

public class Solution {

	private static int rec(int i, int heights[]) {

		if (i == (heights.length - 1)) {
			// Reached the last stair.
			return 0;
		}

		// Two available choices.
		int oneJump = Integer.MAX_VALUE;
		int twoJump = Integer.MAX_VALUE;

		if ((i + 1) < heights.length) {
			oneJump = Math.abs(heights[i] - heights[i + 1]) + rec(i + 1, heights);
		}

		if ((i + 2) < heights.length) {
			twoJump = Math.abs(heights[i] - heights[i + 2]) + rec(i + 2, heights);
		}

		int ans = Math.min(oneJump, twoJump);
		return ans;
	}

	public static int frogJump(int n, int heights[]) {

		int ans = rec(0, heights);
		return ans;
	}
}

//2. DP Memoization - TC O(N) SC O(N)

import java.util.*;
public class Solution {
    
    static int func(int ind, int heights[], int dp[])
    {
        //base case
        if(ind == 0) return 0;
        //chk if subproblem is already solved
        if(dp[ind] != -1) return dp[ind];
        
        //do left and right 
        int left = func(ind-1, heights, dp) + Math.abs(heights[ind] - heights[ind-1]);
        
        int right = Integer.MAX_VALUE;
        if(ind > 1)
            right = func(ind-2, heights, dp) + Math.abs(heights[ind] - heights[ind-2]);
        
        return dp[ind] = Math.min(left, right);
    }
    public static int frogJump(int n, int heights[]) {

        //1. create a dp array with size n+1 and initialize it with -1
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        
        return func(n-1, heights, dp);
    }

}

//3. Memoization to Tabulation
//TC - O(N) SC - O(N)

import java.util.*;
public class Solution {
    public static int frogJump(int n, int heights[]) {

        //Tabulation - Bottom up - start from the base case
        
        //1. Create a dp array of size n+1;
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        
        //2. fix the base case
        dp[0] = 0;
        
        //3. use recursion relation for the rest of the indexes 
        for(int i = 1; i<n; i++)
        {
            int jump1 = dp[i-1] + Math.abs(heights[i] - heights[i-1]);
            
            //jump2 will only happen if index is greater than 1
            int jump2 = Integer.MAX_VALUE;
            if(i > 1)
                jump2 = dp[i-2] + Math.abs(heights[i] - heights[i-2]);
            
           dp[i] = Math.min(jump1, jump2); 
            
        }
        return dp[n-1];
    }

}


//4. Space Optimization - TC O(N) SC O(1)

public class Solution {
    public static int frogJump(int n, int heights[]) {

        // Space optimization
        int previ = 0;
        int prev2i = 0;
        
        for(int i = 1; i<n; i++)
        {
            int jump1 = previ + Math.abs(heights[i] - heights[i-1]);
            
            int jump2 = Integer.MAX_VALUE;
            if(i>1)
                jump2 = prev2i + Math.abs(heights[i] - heights[i-2]);
            
            int curri = Math.min(jump1, jump2);
            prev2i = previ;
            previ = curri;
        }
        return previ;
    }

}
