//1. Recursion
/*
    Time Complexity: O(2^N)
    Space Complexity: O(2^N)

    where 'N' is the number of staris in the staircase.
*/

public class Solution {

	private static int rec(int i, int heights[]) {

		if (i == (heights.length - 1)) {
			// Reached the last stair.
			return 0;
		}

		// Two available choices.
		int oneJump = Integer.MAX_VALUE;
		int twoJump = Integer.MAX_VALUE;

		if ((i + 1) < heights.length) {
			oneJump = Math.abs(heights[i] - heights[i + 1]) + rec(i + 1, heights);
		}

		if ((i + 2) < heights.length) {
			twoJump = Math.abs(heights[i] - heights[i + 2]) + rec(i + 2, heights);
		}

		int ans = Math.min(oneJump, twoJump);
		return ans;
	}

	public static int frogJump(int n, int heights[]) {

		int ans = rec(0, heights);
		return ans;
	}
}
