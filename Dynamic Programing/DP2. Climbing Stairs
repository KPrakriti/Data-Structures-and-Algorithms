//1. Recursive approach TC O(N^2) SC O(N) 
//(Top Down Approach)

class Solution {
    public int climbStairs(int n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        if (n == 2) {
            return 2;
        }
        return climbStairs(n - 1) + climbStairs(n - 2);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//2. Better Solution - DP - TC O(N) SC O(N)
int main() {

  int n=3;
  vector<int> dp(n+1,-1);
  
  dp[0]= 1;
  dp[1]= 1;
  
  for(int i=2; i<=n; i++){
      dp[i] = dp[i-1]+ dp[i-2];
  }
  cout<<dp[n];
  return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//3. Optimized solution TC O(N) SC O(1)
//DP + Optimization (Bottom Up Approach)

class Solution {
    public int climbStairs(int n) {
        
        int prev1 = 1;
        int prev2 = 1;
        int curri;
        
        for(int i =2; i<=n; i++)
        {
            curri = prev1 + prev2;
            prev1 = curri;
            prev2 = prev1;
        }
        return prev1;
    }
}
