Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment or decrement an element of the array by 1.

Test cases are designed so that the answer will fit in a 32-bit integer.

Example 1:

Input: nums = [1,2,3]
Output: 2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]

Example 2:

Input: nums = [1,10,2,9]
Output: 16

TC - O(NlogN)

Since we have sorted the array we will get the middle element which is greater that every element at left
and smaller than every elemnt at right.
we will make all the eements in array equal to this middle element beacuse 
it would take the minimum number of steps

class Solution {
    public int minMoves2(int[] nums) {
        
        Arrays.sort(nums);
        int mid = nums[nums.length/2];
        int ans = 0;
        for(int i =0; i<nums.length; i++)
        {
            ans += Math.abs(mid - nums[i]);
        }
        return ans;
    }
}
