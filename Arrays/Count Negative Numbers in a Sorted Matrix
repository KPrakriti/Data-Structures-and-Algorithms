//Easy
//Matrix , Binary search

Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
//TC - O(rows*log(col))

class Solution {
    public int countNegatives(int[][] grid) {
        
        int count = 0;
        for(int i = 0; i < grid.length; ++i) 
        {
            // Count negative numbers of each row
            count += negativeEachRow(grid[i]);
        }
        return count;
    }
    
    private int negativeEachRow(int[] row) {
        
        int count = 0;
        
        int low = 0, high = row.length - 1;
        
        while (low <= high) 
        {
            int mid = (low + high) / 2;
            
            // if midPoint is positive, go to the right side
            // if midPoint is negative, count the right side(because they are all negative) and go to left side.
            if (row[mid] >= 0) 
            {
                low = mid + 1;
            } 
            else if (row[mid] < 0) 
            {
                count += high - mid + 1;
                high = mid - 1;
            }
        }
        return count;
    }
}

[4,3,2,-1],
[3,2,1,-1],
[1,1,-1,-2],
[-1,-1,-2,-3]
