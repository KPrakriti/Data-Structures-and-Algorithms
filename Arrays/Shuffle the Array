Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
Return the array in the form [x1,y1,x2,y2,...,xn,yn].

Example 1:
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

//Solution 1 - TC O(N) SC O(N)

class Solution {
    public int[] shuffle(int[] nums, int n) {
        
        int[] res = new int[nums.length];
        
        int ind=0;
        for(int i = 0, j = n; ind<res.length; i++,j++)
        {
            res[ind++] = nums[i];
            res[ind++] = nums[j];
        }
        return res;
    }
}

//Solution 2 - TC O(N) SC O(1)

class Solution {
    public int[] shuffle(int[] nums, int n) {
        
        int len = nums.length;
        
        for(int i = n; i < len; i++) {
            nums[i] = (nums[i] << 10) | nums[i - n];
        }
        
        int index = 0;
        for(int i = n; i < len; i++, index += 2) {
            nums[index] = nums[i] & 1023;
            nums[index + 1] = nums[i] >>> 10;
        }
        
        return nums;
    }
}


/*
Explaination for solution 2

EXPLANATION:

Let's understand in general term:

Suppose we have 2 numbers num1 = 4 and num2 = 9 and maxValue = 10
Formula:
to store -> pair = (num2 × maxValue) + num1
to retrieve -> pair % maxValue and pair / maxValue

Storing the pair of numbers

(9 × 10) + 4 = 94 --> from above formula (num2 × maxValue) + num1
94 is stored

Retrieving each number one by one

94 % 10 = 4
we got first number as 4

94 / 10 = 9
we got second number as 9

Same idea goes for large cases and array as well but instead of 10, we will take 1024 to store pairs and retrieve each number
NOTE: Here, we will take 1024 because of the given constraints 1 <= nums[i] <= 10^3 i.e. the largest number in the array will be 1000

Now,
Binary representation of 1000 is 1111101000, consisting of total 10 bits
Binary representation of 1024 is 10000000000, consisting of total 11 bits
and if we multiply 1000 with 1024 i.e. (1000 * 1024), we will get 1024000
Binary representation of 1024000 is 11111010000000000000, consisting of total 20 bits which is less than the number of bits (32bits) of int data type, so we can store the number pairs(by multiplying one number with 1024 and adding another number to it) to retrieve each indivisual number later on(by taking out the remainder and the quotient).
eg: suppose we have an array of length 4 and n is 2
nums = [5, 2, 1000, 3] and n = 2

We will store the pair of numbers first

According to algorithm

// to store the pair of numbers in right half of the original array
for(int i = n; i < len; i++)
nums[i] = (nums[i] * 1024) + nums[i - n];
Iteration 1:
when i = 2, (i = 2 because value of n is 2)
nums[2] = (1000 × 1024) + 5
so, nums[2] = 1024005

Iteration 2:
when i = 3,
nums[3] = (3 × 1024) + 2
so, nums[3] = 3074

Now, the original array
[5, 2, 1000, 3]
 0  1     2     3   <-- Indexes
becomes
[5, 2, 1024005, 3074]
 0  1        2          3   <-- Indexes

We will retrieve the numbers one by one from the pairs which we have stored at 2nd and 3rd index

According to algorithm

// to retrive values from the pair of numbers and placing those retrieved value at their desired position
int index = 0;
for(int i = n; i < len; i++, index += 2){
	nums[index] = nums[i] % 1024;
	nums[index + 1] = nums[i] / 1024;
}
Iteration 1:
when index = 0 and i = 2, (i = 2 because value of n is 2)
nums[0] = 1024005 % 1024 = 5
nums[1] = 1024005 / 1024 = 1000
now, index = 2 (from index += 2)

Iteration 2:
when index = 2, i = 3,
nums[2] = 3074 % 1024 = 2
nums[3] = 3074 / 1024 = 3

Iteration will be stopped now as the condition become false and we got the array as following
[5, 1000, 2, 3] <-- Desired Output
 0     1     2  3  <-- Indexes

*/
