//Medium
//Array , Binary Search

You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. 
You can divide each pile into any number of sub piles, but you cannot merge two piles together.

You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. 
Each child can take at most one pile of candies and some piles of candies may go unused.

Return the maximum number of candies each child can get.

Example 1:

Input: candies = [5,8,6], k = 3
Output: 5
Explanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. 
We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. 
It can be proven that each child cannot receive more than 5 candies.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int maximumCandies(int[] candies, long k) {
        
        int max = 0;
        
        for(int candy : candies)
        {
            max = Math.max(max, candy);
        }
        int low = 1;
        int high = max;
        
        while(low<high)
        {
            int mid = (low+high)/2;
            
            if(canAllocate(candies,k,mid))
            {
                low = mid+1;
            }
            else
            {
                high = mid;
            }
        }
        //once the high and low becomes equal we will come out of the while loop
        //and we need to do a final check if the pilesize as low can be allocated to K children or not
        //if yes then return low else return low - 1;
        return canAllocate(candies,k,low) ? low : low-1;
    }
    
    //write the canAllocate method
    private boolean canAllocate(int[] candies, long k, int pileSize)
    {
        if(pileSize == 0) return true;
        
        long childrenGotCandy = 0;
        
        for(int candy : candies)
        {
            childrenGotCandy += candy/pileSize;
            
            if(childrenGotCandy >= k) return true;
        }
        return false;
    }
}
