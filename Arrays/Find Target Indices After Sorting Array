//Easy
//Array , Binary Search Sorting

You are given a 0-indexed integer array nums and a target element target.

A target index is an index i such that nums[i] == target.

Return a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. 
The returned list must be sorted in increasing order.

Example 1:

Input: nums = [1,2,5,2,3], target = 2
Output: [1,2]
Explanation: After sorting, nums is [1,2,2,3,5].
The indices where nums[i] == 2 are 1 and 2.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Java O(N) single-loop count - The smart approach 

One iteration to count less than target, and equal target. Build output based on the first index at lessthan.

class Solution {
    public List<Integer> targetIndices(int[] nums, int target) {
        int count = 0, lessthan = 0;
        for (int n : nums) {
            if (n == target) count++;
            if (n < target) lessthan++;
        }
        
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            result.add(lessthan++);
        }
        return result;
    }
}

//TC O(N) SC O(1)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Binary Search Approach

class Solution {
public List<Integer> targetIndices(int[] nums, int target) 
{
    List<Integer> res = new ArrayList<>();
    Arrays.sort(nums);
    
    int firstIndex = BinarySearch(nums, target, true);
    int lastIndex = BinarySearch(nums, target, false);

    if(firstIndex==-1)
      {
        return res;
      }
    
    for(int i=firstIndex;i<=lastIndex;i++)
      {
        res.add(i);
      }
      return res;
    }
    public int BinarySearch(int[] arr, int target, boolean firstIndex)
     {
        int ans=-1;
        int start=0; 
        int end=arr.length-1;
        
        while (start <= end)
          {
          int mid = (end+start)/2;
            
          if(target < arr[mid])
            {
            end=mid-1;
            } 
        else if(target > arr[mid])
        {
           start=mid+1;
        } 
            else
            {
             ans = mid;
           if(firstIndex)
           {
              end=mid-1;
           } 
            else
          {
           start=mid+1;
           }
          }
        }
        return ans;
      }
    }
    
//TC O(NlogN)
