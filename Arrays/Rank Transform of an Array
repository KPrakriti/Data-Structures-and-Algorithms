//Array, hashTable, Sorting

Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

Rank is an integer starting from 1.
The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
Rank should be as small as possible.
 

Example 1:

Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.

Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//SC O(1)  TC O(NlogN) + O(N) + O(N) 

class Solution {
    public int[] arrayRankTransform(int[] arr) {
         
        //make a copy of original array and sort it
        int[] A = Arrays.copyOf(arr, arr.length);
        
        Arrays.sort(A);
        
        //create a hashmap to store the ranks of each of the element 
        HashMap<Integer, Integer> rank = new HashMap<>();
        
        //traverse in the sorted array A
        for (int x : A)
          //for each of the element in A 
          //put them in hashmap along with the rank
          //because the elements are in sorted order 
          //1st element's rank will be 1 only and so on for the others
          //so we can easily compute the rank for sorted elements by using the map size
          rank.putIfAbsent(x, rank.size() + 1);
        
        //again traverse in the original array 'arr'
        //and store the ranks from the hashmap to the A[i] in non sorted or I can say the original order
        for (int i = 0; i < arr.length; ++i)
          A[i] = rank.get(arr[i]);
        
        //return A as it contains the correct ranks!
        return A;
    }
}
