Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, 
for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
Return the answer in an array.

Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]

//Solution 1

Create a copy of the input array. copy = [8,1,2,2,3]
Sort the copy array. copy = [1,2,2,3,8]
Fill the map: number => count (where count is an index in sorted array, so first number with 
index 0 has 0 numbers less than it, index 1 has 1 number less, etc). We update only first time 
we enocunter the number so that way we skip duplicates.
map[1]=>0
map[2]=>1
map[3]=>3
map[8]=>4
We re-use our copy array to get our result, we iterate over original array, and get counts from the map.
[4,0,1,1,3]

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        
        Map<Integer, Integer> map = new HashMap<>(); //SC - O(N)
        int[] copy = nums.clone();
        
        Arrays.sort(copy);  //TC - O(logN)
        
        for (int i = 0; i < nums.length; i++) { //TC - O(N)
            map.putIfAbsent(copy[i], i);
        }
        
        for (int i = 0; i < nums.length; i++) { //TC - O(N)
            copy[i] = map.get(nums[i]);
        }
        
        return copy;
    }
}

//Overall Time and Space complexity 
//TC - O(NlogN) SC - O(N)

--------------------------------------------------------------------------------------------------

//Solution 2

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] count = new int[101];
        int[] res = new int[nums.length];
        
        for (int i =0; i < nums.length; i++) {
            count[nums[i]]++;
        }
        
        for (int i = 1 ; i <= 100; i++) {
            count[i] += count[i-1];    
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0)
                res[i] = 0;
            else 
                res[i] = count[nums[i] - 1];
        }
        
        return res;        
    }
}

//SC - O(N)
//TC - O(N)
