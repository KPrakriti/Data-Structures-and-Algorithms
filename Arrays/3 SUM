Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

APPROACH 1 : BRUTE FORCE Using 3 FOR LOOPS : TC O(N^3 log M) - log M time will take to insert array elemnts to set DS : SC O(M)

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
    Set<List<Integer>> set = new HashSet<>();
    Arrays.sort(nums);
        
    for (int i = 0; i < nums.length-2; i++)
    {
        for(int j = i+1; j<nums.length-1; j++)
        {
            for(int k = j+1; k<nums.length; k++)
            {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum == 0)
                {
                    set.add(Arrays.asList(nums[i], nums[j], nums[k]));
                }
            }
        }
       
    }
    return new ArrayList<>(set);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

APPROACH 2 : 
