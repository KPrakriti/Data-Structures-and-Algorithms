Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums.
More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH 1 : BRUTE FORCE : TC O(NlogN) 

class Solution {
    public int removeDuplicates(int[] nums) {
        //create a HashSet to store the unique elements 
        HashSet<Integer> hashnum = new HashSet<>();
        //initialize index to 0 
        int index=0;
        //Traverse through the complete array 
        for(var i : nums)
        {
        //if the value gets added to the HashSet 
           if(hashnum.add(i))
           {
        //put that value in nums[index]
               nums[index] = i;
        //increment the index 
               index++;               
           }
           
        } 
       return index;
}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

APPROACH 2 : Two Pointers : TC : O(N) 

class Solution {
    public int removeDuplicates(int[] nums) {
         //Two pointer approach
        int j = 1;
        int i = 0;
        while(i < nums.length && j < nums.length)
        {
            if(nums[i] == nums[j])
            {
                j++;
            }
            else
            {
                i++;
                nums[i] = nums[j];
            }
          
    }
          return i+1;
}
    }
}
