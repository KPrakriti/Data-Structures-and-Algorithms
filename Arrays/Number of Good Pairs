/*
Given an array of integers nums, return the number of good pairs.
A pair (i, j) is called good if nums[i] == nums[j] and i < j.

Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
*/

//Solution 1 - TC O(N^2) SC O(1)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        
        int count = 0;
        
        for(int i =0; i<nums.length; i++)
        {
            for(int j =i+1;j<nums.length; j++)
            {
                if(nums[i] == nums[j] && i<j)
                {
                    count++;
                }
            }
        }
        return count;
    }
}

/*
Solution 2: Think what we are doing in last solution, we are calculating how many time nums[i] occur before ith index.
So if store occurance of nums[i] in some container lets say array as N <= 100 or hashmap. Then we can remove inner
loop, and simply do ans += count[nums[i]]. TC:O(N), SC:O(1), 100 is fixed size array !!
*/

class Solution {
    public int numIdenticalPairs(int[] nums) {
        
      //Count how many times each number appears. 
      //If a number appears n times, then n * (n â€“ 1) /2
      //good pairs can be made with this number.
        
        int ans = 0;
        int count[] = new int[101];
        
        for(int i =0; i< nums.length; i++)
        {
            if(count[nums[i]] != 0)
            {
                ans += count[nums[i]];
            }
            count[nums[i]]++;
        }
        return ans;
    }
}

