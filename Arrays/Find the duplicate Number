//Related Topics - Array, Two Pointers, Bit Manipulation, Hashing, Binary Search

Approach 1 - use 2 for loops : TC O(N^2) , SC O(1)
---------------------------------------------------

class Solution {
    public int findDuplicate(int[] nums) {
        int duplicate = 0;
        int xor = 0;
        int n = nums.length;
        for(int i = 0; i<n; i++)
        {
           for(int j = i+1; j<n; j++)
           {
               xor = nums[i]^nums[j];
               if(xor == 0)
               {
                   duplicate = nums[i];
                   break;
               }
           }
        }
        return duplicate;
    }
}

Approach 2 - Sort the array and check for duplicate : TC O(NlogN) + O(N) , SC O(1)
-----------------------------------------------------------------------------------

class Solution {
    public int findDuplicate(int[] nums) {
        
        int n = nums.length;
        Arrays.sort(nums);
        int duplicate = 0;
        
        for(int i = 0; i<n-1; i++)
        {
            if(nums[i] == nums[i+1])
            {
                duplicate = nums[i];
            }
        }
        return duplicate;
    }
}

Approach 3 : Use HashSet : TC O(N) SC O(N)
-------------------------------------------

class Solution {
    public int findDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            if (!set.add(nums[i])) {
                return nums[i];
            }
        }

        return 0;
    }
}

Approach 4 : Using two pointers Slow and Fast : TC O(N) SC O(1)
---------------------------------------------------------------

Use linkedList Cycle method and Tortoise method 
Tortoise method 
Take 2 pointers slow and fast. 
The slow pointer always moves 1 position ahead 
The fast pointer always moves 2 positions ahead 
Continue this until slow and fast pointer collide
When both collide, leave the slow as it is but move the fast at position nums[0].
Again, move both the pointers 1 position ahead and youâ€™ll see that they collided again and on the repeating number only
Return the number
*Google - The idea behind the algorithm is that, if you have two pointers in a linked list, one moving twice as fast (the hare) than the other (the tortoise), then if they intersect, there is a cycle in the linked list. If they don't intersect, then there is no cycle*


class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0]; 
        do {
            slow = nums[slow]; 
            fast = nums[nums[fast]]; 
        } while(slow != fast); 
        
        fast = nums[0]; 
        while(slow != fast) {
            slow = nums[slow]; 
            fast = nums[fast]; 
        }
        return slow; 
    }
}
